                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_sprite_data
                                     13 	.globl _joypad
                                     14 	.globl _delay
                                     15 	.globl _Tank
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area _DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area _INITIALIZED
    00000000                         27 _Tank::
    00000000                         28 	.ds 32
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area _HOME
                                     37 	.area _GSINIT
                                     38 	.area _GSFINAL
                                     39 	.area _GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area _HOME
                                     44 	.area _HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area _CODE
                                     49 ;main.c:6: void main(void){
                                     50 ;	---------------------------------
                                     51 ; Function main
                                     52 ; ---------------------------------
    00000000                         53 _main::
                                     54 ;main.c:9: set_sprite_data(0, 2, Tank);
    00000000 11r00r00         [12]   55 	ld	de, #_Tank
    00000003 D5               [16]   56 	push	de
    00000004 21 00 02         [12]   57 	ld	hl, #0x200
    00000007 E5               [16]   58 	push	hl
    00000008 CDr00r00         [24]   59 	call	_set_sprite_data
    0000000B E8 04            [16]   60 	add	sp, #4
                                     61 ;c:\gbdk\include\gb\gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    0000000D 21r00r00         [12]   62 	ld	hl, #_shadow_OAM
                                     63 ;c:\gbdk\include\gb\gb.h:1962: itm->y=y, itm->x=x;
    00000010 3E 4E            [ 8]   64 	ld	a, #0x4e
    00000012 22               [ 8]   65 	ld	(hl+), a
    00000013 36 58            [12]   66 	ld	(hl), #0x58
                                     67 ;main.c:11: SHOW_SPRITES; 
    00000015 F0r00            [12]   68 	ldh	a, (_LCDC_REG + 0)
    00000017 F6 02            [ 8]   69 	or	a, #0x02
    00000019 E0r00            [12]   70 	ldh	(_LCDC_REG + 0), a
                                     71 ;main.c:15: while(1){
    0000001B                         72 00105$:
                                     73 ;main.c:16: switch(joypad()){
    0000001B CDr00r00         [24]   74 	call	_joypad
    0000001E FE 01            [ 8]   75 	cp	a, #0x01
    00000020 28 06            [12]   76 	jr	Z, 00101$
    00000022 D6 02            [ 8]   77 	sub	a, #0x02
    00000024 28 13            [12]   78 	jr	Z, 00102$
    00000026 18 20            [12]   79 	jr	00103$
                                     80 ;main.c:17: case J_RIGHT: 
    00000028                         81 00101$:
                                     82 ;c:\gbdk\include\gb\gb.h:1875: shadow_OAM[nb].tile=tile;
    00000028 21r02r00         [12]   83 	ld	hl, #(_shadow_OAM + 2)
    0000002B 36 01            [12]   84 	ld	(hl), #0x01
                                     85 ;c:\gbdk\include\gb\gb.h:1977: OAM_item_t * itm = &shadow_OAM[nb];
    0000002D 01r00r00         [12]   86 	ld	bc, #_shadow_OAM
                                     87 ;c:\gbdk\include\gb\gb.h:1978: itm->y+=y, itm->x+=x;
    00000030 0A               [ 8]   88 	ld	a, (bc)
    00000031 02               [ 8]   89 	ld	(bc), a
    00000032 03               [ 8]   90 	inc	bc
    00000033 0A               [ 8]   91 	ld	a, (bc)
    00000034 C6 0A            [ 8]   92 	add	a, #0x0a
    00000036 02               [ 8]   93 	ld	(bc), a
                                     94 ;main.c:20: break;
    00000037 18 0F            [12]   95 	jr	00103$
                                     96 ;main.c:21: case J_LEFT: 
    00000039                         97 00102$:
                                     98 ;c:\gbdk\include\gb\gb.h:1875: shadow_OAM[nb].tile=tile;
    00000039 21r02r00         [12]   99 	ld	hl, #(_shadow_OAM + 2)
    0000003C 36 00            [12]  100 	ld	(hl), #0x00
                                    101 ;c:\gbdk\include\gb\gb.h:1977: OAM_item_t * itm = &shadow_OAM[nb];
    0000003E 01r00r00         [12]  102 	ld	bc, #_shadow_OAM
                                    103 ;c:\gbdk\include\gb\gb.h:1978: itm->y+=y, itm->x+=x;
    00000041 0A               [ 8]  104 	ld	a, (bc)
    00000042 02               [ 8]  105 	ld	(bc), a
    00000043 03               [ 8]  106 	inc	bc
    00000044 0A               [ 8]  107 	ld	a, (bc)
    00000045 C6 F6            [ 8]  108 	add	a, #0xf6
    00000047 02               [ 8]  109 	ld	(bc), a
                                    110 ;main.c:25: }
    00000048                        111 00103$:
                                    112 ;main.c:27: delay(100);
    00000048 11 64 00         [12]  113 	ld	de, #0x0064
    0000004B CDr00r00         [24]  114 	call	_delay
                                    115 ;main.c:29: }
    0000004E 18 CB            [12]  116 	jr	00105$
                                    117 	.area _CODE
                                    118 	.area _INITIALIZER
    00000000                        119 __xinit__Tank:
    00000000 00                     120 	.db #0x00	; 0
    00000001 00                     121 	.db #0x00	; 0
    00000002 00                     122 	.db #0x00	; 0
    00000003 00                     123 	.db #0x00	; 0
    00000004 18                     124 	.db #0x18	; 24
    00000005 18                     125 	.db #0x18	; 24
    00000006 18                     126 	.db #0x18	; 24
    00000007 38                     127 	.db #0x38	; 56	'8'
    00000008 18                     128 	.db #0x18	; 24
    00000009 18                     129 	.db #0x18	; 24
    0000000A 3C                     130 	.db #0x3c	; 60
    0000000B 3C                     131 	.db #0x3c	; 60
    0000000C 3C                     132 	.db #0x3c	; 60
    0000000D 3C                     133 	.db #0x3c	; 60
    0000000E 00                     134 	.db #0x00	; 0
    0000000F 00                     135 	.db #0x00	; 0
    00000010 00                     136 	.db #0x00	; 0
    00000011 00                     137 	.db #0x00	; 0
    00000012 00                     138 	.db #0x00	; 0
    00000013 00                     139 	.db #0x00	; 0
    00000014 18                     140 	.db #0x18	; 24
    00000015 18                     141 	.db #0x18	; 24
    00000016 18                     142 	.db #0x18	; 24
    00000017 1C                     143 	.db #0x1c	; 28
    00000018 18                     144 	.db #0x18	; 24
    00000019 18                     145 	.db #0x18	; 24
    0000001A 3C                     146 	.db #0x3c	; 60
    0000001B 3C                     147 	.db #0x3c	; 60
    0000001C 3C                     148 	.db #0x3c	; 60
    0000001D 3C                     149 	.db #0x3c	; 60
    0000001E 00                     150 	.db #0x00	; 0
    0000001F 00                     151 	.db #0x00	; 0
                                    152 	.area _CABS (ABS)
